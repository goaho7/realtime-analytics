version: '3'

volumes:
  pg_data:

services:

  user-api:
    build: ./user_api
    ports:
      - "8000:8000"
    depends_on:
      - kafka

  data-spamer:
    build: ./data_spamer
    depends_on:
      - user-api

  event-processor:
    build: ./event_processor
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "poetry run alembic upgrade head && poetry run python main.py"
    volumes:
      - ./event_processor:/event_processor
  
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --list --zookeeper zookeeper:2181 || exit 1"
        ]
      interval: 7s
      timeout: 7s
      retries: 5
      start_period: 10s
    depends_on:
      - zookeeper

  postgres:
    image: postgres:13
    env_file: event_processor/.env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 2s
      timeout: 2s
      retries: 5

  # analytics-api:
  #   build: ./analytics_api
  #   ports:
  #     - "8001:8001"
  #   depends_on:
  #     - postgres

  # event-processor:
  #   build: ./event_processor
  #   depends_on:
  #     - kafka
  #     - postgres

  # celery-worker:
  #   build: .
  #   command: celery -A tasks worker --loglevel=info
  #   depends_on:
  #     - redis

  # redis:
  #   image: redis:alpine